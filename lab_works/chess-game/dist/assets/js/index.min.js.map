{"version":3,"sources":["index.min.js","bishop.js","utils.js","king.js","chess-pieces.js","knight.js","state.js","moves.js","castling.js","pawn.js","check.js","queen.js","en-passant.js","rook.js","promotion.js","active-player.js","draw.js","main.js","index.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","configurable","writable","BishopMoves","chessObjBox","chessObj","letters","rangeStart","undefined","rangeStop","rangeInterval","rowNumber","colNumber","scanXpoints","colLetter","piece","range","slopeM","scanPositiveDiagonal","map","scanNegativeDiagonal","removeOutOfBoundsPossibleMoves","arrayX","splitPossibleMoves","arrayX1","filterPossibleMoves","arrayX2","arrayY","arrayY1","arrayY2","possibleMoves","concat","possibleTargets","start","stop","step","result","scanPoints","finalRowNo","Boolean","scanPointsAlphaNum","indexX","indexOf","firstArray","slice","reverse","dataArray","passable","kingdom","KingMoves","bishopMoves","rookMoves","RookMoves","CHESS_DATA","blackPawn","location","htmlcode","position","img","blackKing","blackQueen","blackBishop","blackKnight","blackRook","whitePawn","whiteKing","whiteQueen","whiteBishop","whiteKnight","whiteRook","KnightMoves","state","active_chess_player","active_chess_box_id","chess_obj","active_chess_obj","pawn_double_step_status","king_location","white","black","castling","king_side","king_move","rook_move","rook","status","space_empty","space_attacked","queen_side","checked","checkmate","winner","GetPossibleMoves","pawnDoubleStepStatus","PawnMoves","QueenMoves","Castling","chessPieceMoved","hasCastling","console","log","rowRook","rookId","setInnerImg","CheckCastling","CheckIfChecked","_castling$active_ches","checkKingQueenSide","side","checkEmptyBoxes","checkIfBoxesBeingChecked","document","getElementById","classList","add","locationIds","chessObjSimulation","JSON","parse","stringify","kingPiece","checkers","getCheckers","rowNumbersPMoves","scanXPoints","rawPossibleTargets","slope","scanX","y","scanCheckers","positionString","locationId","queenMoves","knightMoves","kingMoves","pawnMoves","UndoMove","kingChecked","getElementsByClassName","remove","currentCheckedKingdom","CheckAreaIfChecked","previousBoxId","nextBoxId","safe","dangerous","includes","EnPassant","chessPieceOriginalBox","pawnEnPassant","UpdateEnPassantState","Math","abs","scanPointsHorizontal","scanYpoints","scanPointsVertical","scanPointsAlphaNumX","scanPointsAlphaNumY","PawnPromotion","nextBox","setInnerHtml","SetActivePlayer","ACTIVE_CHESS_PLAYER","innerHTML","toUpperCase","ToggleActivePlayer","getClassListIncludes","ElementId","className","InputString","children","imgString","setAttribute","DrawChessTiles","app","colorInd","j","rowNumbers","colorBox","chessBox","box","createElement","appendChild","SetChessPieces","piecesInitialPlace","_piecesInitialPlace$k","rowKey","DrawChessPieces","chessBoxSelected","chessPieceBox","UndrawChessPieces","removeChild","childNodes","RedrawChessPieces","replaceChild","AddClassesOfMovesOrTargetsSquares","move","RemoveClassesOfMovesOrTargetsSquares","selected","castles","InitializeChessMap","chess_obj_initial","ReInitializeChessMap","init_state","ToggleActivePiece","thisId","classes","_GetPossibleMoves","PossibleMoveSelected","previousBox","hasPossibleMove","hasPossibleTarget","pop","findKing","_loop","addEventListener","id"],"mappings":"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","file":"index.min.js","sourcesContent":[null,null,null,null,null,null,null,null,"import { CheckIfChecked, getCheckers } from './check.js';\nimport { getClassListIncludes, setInnerImg} from '../utils.js';\n\n/*\nPerform castling when king is moved and hasCastling class exist;\n*/ \nexport const Castling = function(chessPieceMoved, hasCastling, state) {\n    let {\n        active_chess_obj,\n        active_chess_player\n        } = state;\n    if (chessPieceMoved.piece.position == \"king\" & hasCastling){\n        console.log(\"Castling!\");\n        let rowRook = active_chess_player == \"white\" ? \"1\" : \"8\";\n        // console.log(chessPieceMoved.colLetter);\n        if (chessPieceMoved.colLetter == \"g\") {\n            let rookId = \"h\" + rowRook;\n            // update state.chess_obj -Swapping pieces to null and vice versa\n            active_chess_obj[\"f\"+rowRook].piece=active_chess_obj[rookId].piece;\n            active_chess_obj[rookId].piece = null;\n            // Redraw the chess pieces in the DOM\n            setInnerImg(rookId, \"\");\n            setInnerImg(\"f\"+rowRook, active_chess_obj[\"f\"+rowRook].piece.img);\n\n        } else {\n            let rookId = \"a\" + rowRook;\n            // update state.chess_obj -Swapping pieces to null and vice versa\n            active_chess_obj[\"d\"+rowRook].piece=active_chess_obj[rookId].piece;\n            active_chess_obj[rookId].piece = null;\n            // Redraw the chess pieces in the DOM\n            setInnerImg(rookId, \"\");\n            setInnerImg(\"d\"+rowRook, active_chess_obj[\"d\"+rowRook].piece.img);\n        };\n    };\n};\n\n\n\nexport const CheckCastling = function (state) {\n    let {\n        active_chess_box_id,\n        active_chess_player,\n        active_chess_obj,\n        castling,\n        checked\n        } = state;\n\n    if (active_chess_obj[active_chess_box_id].piece.position == \"king\"){\n        // console.log(\"king\")\n        if(castling[active_chess_player] != null){\n            // Rule 2 check if king is being checked in its location.\n            CheckIfChecked(state,  null)\n            \n            if (checked[active_chess_player] == null){\n                // Passed rule 2\n                let { \n                    king_side,\n                    queen_side,\n                    } = castling[active_chess_player];\n\n                checkKingQueenSide(king_side, active_chess_obj, state)\n                checkKingQueenSide(queen_side, active_chess_obj, state)\n            };\n        };\n    };\n    console.log(state.castling)\n    // console.log(active_chess_obj)\n};\n\n// Checks kingside / queenside for Rule 3, 4 and 5\nconst checkKingQueenSide = function(side, active_chess_obj, state){\n    if (side.rook.status == false) {\n\n        checkEmptyBoxes(side.space_empty,\n                        active_chess_obj);\n\n        if (side.space_empty.status == true) {\n\n            checkIfBoxesBeingChecked(side, state);\n\n            if (side.space_attacked.status == false) {\n                document.getElementById(side.king_move).\n                    classList.add(\"castling\")\n            };\n        };\n    };\n};\n\n// RULE 4 - check the space between the rook and king\nconst checkEmptyBoxes = function(space_empty , active_chess_obj) {\n    let result = [];\n    space_empty.location.forEach(value => {\n        if (active_chess_obj[value].piece){\n            // occupied\n            result.push(false);\n        } else {\n            result.push(true);\n        };\n    });\n    // reverse to convert false to true.\n    space_empty.status = result[0] & result[1];\n};\n\n// RULE 5 - Terminal boxes must not be currentyl within range of eme,y\nconst checkIfBoxesBeingChecked = function(side, state){\n    let {\n        active_chess_obj,\n        king_location,\n        active_chess_player\n        } = state;\n    let locationIds = side.space_attacked.location;\n    \n    // Deep copy\n    let chessObjSimulation = JSON.parse(JSON.stringify(active_chess_obj));\n\n    let kingPiece = active_chess_obj[king_location[active_chess_player]].piece;\n    console.log(kingPiece)\n    chessObjSimulation[locationIds[0]].piece = kingPiece;\n    chessObjSimulation[locationIds[1]].piece = kingPiece;\n\n    let checkers = [];\n    locationIds.forEach(value => {\n        checkers.push(getCheckers(value, chessObjSimulation, state))\n    })\n\n    checkers = [].concat.apply([], checkers);\n    // console.log(checkers)\n    side.space_attacked.status = checkers.length > 0 ? true : false\n}",null,"\nimport { PawnMoves } from '../chess-pieces/pawn.js';\nimport { KnightMoves } from '../chess-pieces/knight.js';\nimport { RookMoves } from '../chess-pieces/rook.js';\nimport { BishopMoves } from '../chess-pieces/bishop.js';\nimport { QueenMoves } from '../chess-pieces/queen.js';\nimport { KingMoves } from '../chess-pieces/king.js';\n\n\nconst scanCheckers = function(possibleTargets, active_chess_obj,\n                              positionString ) {\n    if (possibleTargets.length > 0){\n        let result = [];\n        possibleTargets.forEach( value => {\n            if (active_chess_obj[value].piece.position == positionString){\n                result.push(active_chess_obj[value]);\n            } \n        });\n        return result.length > 0 ? result : null ;\n    } else {\n        return null;\n    };\n};\n\nexport const getCheckers = function(locationId, active_chess_obj, state) {\n    let {\n        pawn_double_step_status,\n        letters,\n        } = state;\n\n    let chessObjBox = active_chess_obj[locationId];\n    // console.log(\"King Location Details: \", chessObjBox);\n\n    let queenMoves = QueenMoves(chessObjBox, active_chess_obj, letters);\n    let rookMoves = RookMoves(chessObjBox, active_chess_obj, letters);\n    let bishopMoves = BishopMoves(chessObjBox, active_chess_obj, letters);\n    let knightMoves = KnightMoves(chessObjBox, active_chess_obj, letters);\n    let kingMoves = KingMoves(chessObjBox, active_chess_obj, letters);\n    let pawnMoves = PawnMoves(chessObjBox, active_chess_obj,\n                                pawn_double_step_status, letters)\n\n    //Search the pressence of enemy piece with its move, if true, check is true,\n    // find multiple check also,\n    // get the possibe checkers\n    let queenCheck = scanCheckers(queenMoves.possibleTargets,\n                                active_chess_obj,'queen')\n    let rookCheck = scanCheckers(rookMoves.possibleTargets,\n                                active_chess_obj,'rook')\n    let bishopCheck = scanCheckers(bishopMoves.possibleTargets,\n                                active_chess_obj,'bishop')\n    let knightCheck = scanCheckers(knightMoves.possibleTargets,\n                                active_chess_obj,'knight')\n    let kingCheck = scanCheckers(kingMoves.possibleTargets,\n                                active_chess_obj,'king')\n    let pawnCheck = scanCheckers(pawnMoves.possibleTargets,\n                                active_chess_obj,'pawn')\n        \n    let checkers = [\n                queenCheck,\n                rookCheck,\n                bishopCheck,\n                knightCheck,\n                kingCheck,\n                pawnCheck,\n            ].filter(Boolean);\n\n    checkers = [].concat.apply([], checkers);\n\n    return checkers\n};\n\nexport const CheckIfChecked = function (state , UndoMove) {\n    let kingdoms = [\"white\", \"black\"];\n\n    let {\n        active_chess_player,\n        active_chess_obj, \n        king_location\n        } = state;\n\n    kingdoms.forEach( kingdom => {\n\n        let kingChecked = document.getElementsByClassName(\"checked-\"+kingdom)\n\n        Object.keys(kingChecked).forEach(value => {\n            kingChecked[0].classList.remove(\"checked-\"+kingdom); \n        });\n\n        // console.log(kingdom)\n        let checkers = getCheckers(king_location[kingdom],\n                                   active_chess_obj, state);\n        \n        if (checkers.length > 0) { \n            state.checked[kingdom] = checkers;\n            \n            document.getElementById(king_location[kingdom]).\n                classList.add(\"checked-\"+kingdom)\n        } else {\n            state.checked[kingdom] = null;\n            let kingChecked = document.getElementsByClassName(\"checked-\"+kingdom)\n\n            Object.keys(kingChecked).forEach(value => {\n                kingChecked[0].classList.remove(\"checked-\"+kingdom); \n            });\n        } \n\n    });\n\n    if (Boolean(state.checked.white) | Boolean(state.checked.black)) {\n        console.log(\"Checkers!\",state.checked);\n    };\n    let currentCheckedKingdom = Boolean(state.checked.white) ? \"white\" : \n                                Boolean(state.checked.black) ? \"black\" : null;\n\n    if (currentCheckedKingdom != null & UndoMove != null) {\n        if (currentCheckedKingdom != active_chess_player) {\n            console.log(\"Last move was illegal! King is being checked.\")\n            UndoMove(state);\n        }\n    }\n    // console.log(\"Checkers!\",state.checked);\n};\n\nexport const CheckAreaIfChecked = function(previousBoxId,\n                                           nextBoxId,\n                                           state){\n    let {\n        active_chess_player,\n        active_chess_obj, \n        letters,\n        } = state;\n    \n    if (active_chess_obj[previousBoxId].piece.position == \"king\" ){\n        let kingMoves = KingMoves(active_chess_obj[previousBoxId],\n                                active_chess_obj, letters);\n        let possibleMoves = kingMoves.possibleMoves.\n                                concat(kingMoves.possibleTargets);\n        // Deep copy\n        let chessObjSimulation = JSON.parse(JSON.stringify(active_chess_obj));\n        // console.log(kingMoves);\n\n        let result = {};\n        possibleMoves.forEach(value => {\n            chessObjSimulation[value].piece = \n                active_chess_obj[previousBoxId].piece;\n            result[value] = getCheckers(value, chessObjSimulation, state);\n        });\n\n        // Sort save from dangerous\n        let safe = [];\n        let dangerous = [];\n        Object.keys(result).forEach(key => {\n            result[key].length > 0 ? dangerous.push(key) : safe.push(key);\n        });\n        \n        // number of safe moves == 0, checkmate\n        if (safe.length == 0){\n\n            state.checkmate[active_chess_player] = true;\n            active_chess_player == \"white\" ? state.winner = \"black\" :\n                                         state.winner = \"white\";\n            console.log(\"Checkmate\", state.checkmate[active_chess_player]);\n            console.log(\"Winner\", state.winner);\n\n        } else {\n\n            if (dangerous.includes(nextBoxId)) {\n                //undo an return\n                // console.log(\"King move was illegal! King is still checked.\");\n                return\n            };\n        };\n    };\n};\n",null,"import { setInnerImg } from './utils.js';\n\nexport const EnPassant = function (state, chessPieceMoved, chessPieceOriginalBox) {\n    let {\n        active_chess_obj,\n        pawn_double_step_status,\n        } = state;\n    if (Boolean(pawn_double_step_status) & \n        chessPieceMoved.piece.position == \"pawn\" ){\n\n        if (chessPieceMoved.colNumber - \n            pawn_double_step_status.colNumber == 0){\n\n            if(pawn_double_step_status.rowNumber - \n                chessPieceOriginalBox.rowNumber == 0) {\n\n                let pawnEnPassant = pawn_double_step_status.colLetter +\n                                    pawn_double_step_status.rowNumber;\n                // update chessObject\n                active_chess_obj[pawnEnPassant].piece = null;\n                // update dom\n                \n                setInnerImg(pawnEnPassant, \"\")\n                \n                console.log(\"En Passant!\");\n            };\n        };\n    };\n    \n    // update states\n    state.active_chess_obj = active_chess_obj;\n};\n\n// Update the En Passant status in states\nexport const UpdateEnPassantState = function (state, chessPieceMoved, chessPieceOriginalBox) {\n    if (chessPieceMoved.piece.position == \"pawn\" ){\n        if (Math.abs(chessPieceMoved.rowNumber - \n                     chessPieceOriginalBox.rowNumber) == 2){\n\n            state.pawn_double_step_status = {\n                ...chessPieceMoved\n            };\n\n        } else {\n            state.pawn_double_step_status = null;\n        };\n    } else {\n        state.pawn_double_step_status = null;\n    }\n};\n",null,"import { setInnerHtml } from '../utils.js';\n/*\nPromotes Pawn when it reaches the last row\n*/ \n\nexport const PawnPromotion = function(nextBox, chessPieceMoved,\n                                      active_chess_player ){\n    if (chessPieceMoved.piece.position == \"pawn\"){\n        if(chessPieceMoved.rowNumber == 8 & active_chess_player == \"white\"){\n            chessPieceMoved.piece =  {  \n                                        htmlcode: '&#9813;',\n                                        kingdom: 'white',\n                                        position: 'queen'\n                                    };\n            setInnerHtml(nextBox, chessPieceMoved.piece.htmlcode);\n        };\n\n        if(chessPieceMoved.rowNumber == 1 & active_chess_player == \"black\"){\n            chessPieceMoved.piece =  {  \n                                        htmlcode: '&#9819;',\n                                        kingdom: 'black',\n                                        position: 'queen'\n                                    };\n            setInnerHtml(nextBox, chessPieceMoved.piece.htmlcode);\n        };\n    };\n};"]}